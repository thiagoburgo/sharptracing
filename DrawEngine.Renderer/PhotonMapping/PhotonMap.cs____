using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DrawEngine.Renderer.Algebra;
using DrawEngine.Renderer.BasicStructures;

namespace DrawEngine.Renderer.PhotonMapping
{
    /* This is the photon
     * The power is not compressed so the
     * size is 28 bytes
    */
    //**********************
    public class Photon
    {
        //**********************
        public Point3D Position;              // photon position
        public short Plane;                   // splitting plane for kd-tree
        public byte Theta, Phi;               // incoming direction
        public RGBColor Power;                // photon power (uncompressed)
    }


    /* This structure is used only to locate the
     * nearest photons
    */
    //**********************
    public class NearestPhotons
    {
        //**********************
        public int Max;
        public int Found;
        public bool GotHeap;
        public Point3D Position;
        public float[] Dist2;
        public Photon[] index;
    }

    #region Header
    //void store(
    //  float power[3],        // photon power
    //  float pos[3],          // photon position
    //  float dir[3] );        // photon direction

    //void scale_photon_power(
    //  float scale);          // 1/(number of emitted photons)

    //void balance(void);            // balance the kd-tree (before use!)

    //void irradiance_estimate(
    //  float irrad[3],              // returned irradiance
    //  float pos[3],          // surface position
    //  float normal[3],       // surface normal at pos
    //  float max_dist,        // max distance to look for photons
    //  int nphotons );  // number of photons to use

    //void locate_photons(
    //  NearestPhotons *const np,    // np is used to locate the photons
    //  int index);      // call with index = 1

    //void photon_dir(
    //  Vector3D dir,                  // direction of photon (returned)
    //  Photon[] p);      // the photon
    //void balance_segment(
    //  Photon **pbal, 
    //  Photon **porg, 
    //  int index,
    //  int start, 
    //  int end );

    //void median_split(
    //  Photon **p, 
    //  int start, 
    //  int end,
    //  int median, 
    //  int axis );
    #endregion




    public class PhotonMap
    {

        private Photon[] photons;

        private int stored_photons;
        private int half_stored_photons;
        private int max_photons;
        private int prev_scale;

        private float[] costheta = new float[256];
        private float[] sintheta = new float[256];
        private float[] cosphi = new float[256];
        private float[] sinphi = new float[256];

        private Point3D bbox_min;     // use bbox_min
        private Point3D bbox_max;     // use bbox_max
        /* This is the constructor for the photon map.
         * To create the photon map it is necessary to specify the
         * maximum number of photons that will be stored
        */
        //************************************************
        public PhotonMap(int max_phot)
        //************************************************ 
        {
            stored_photons = 0;
            prev_scale = 1;
            max_photons = max_phot;

            this.photons = new Photon[max_photons + 1];

            bbox_min.X = bbox_min.Y = bbox_min.Z = float.MaxValue;
            bbox_max.X = bbox_max.Y = bbox_max.Z = float.MinValue;

            //----------------------------------------
            // initialize direction conversion tables
            //----------------------------------------
            double angle;
            for (int i = 0; i < 256; i++)
            {
                angle = i * (1.0 / 256.0) * Math.PI;
                costheta[i] = (float)Math.Cos(angle);
                sintheta[i] = (float)Math.Sin(angle);
                cosphi[i] = (float)Math.Cos(2.0 * angle);
                sinphi[i] = (float)Math.Sin(2.0 * angle);
            }
        }

        /* photon_dir returns the direction of a photon
         */
        //*****************************************************************
        void photon_dir(out Vector3D dir, Photon p)
        //*****************************************************************
        {
            dir = new Vector3D();
            dir[0] = sintheta[p.Theta] * cosphi[p.Phi];
            dir[1] = sintheta[p.Theta] * sinphi[p.Phi];
            dir[2] = costheta[p.Theta];
        }


        /* irradiance_estimate computes an irradiance estimate
         * at a given surface position
        */
        //**********************************************
        void irradiance_estimate(
          out RGBColor irrad,                // returned irradiance
          Point3D pos,            // surface position
          Vector3D normal,         // surface normal at pos
          float max_dist,          // max distance to look for photons
          int nphotons)     // number of photons to use
        //**********************************************
        {
            irrad = RGBColor.Black;

            NearestPhotons np = new NearestPhotons();
            np.Dist2 = new float[nphotons + 1];
            np.index = new Photon[nphotons + 1];

            np.Position.X = pos.X;
            np.Position.Y = pos.Y;
            np.Position.Z = pos.Z;

            np.Max = nphotons;
            np.Found = 0;
            np.GotHeap = false;
            np.Dist2[0] = max_dist * max_dist;

            // locate the nearest photons
            locate_photons(ref np, 1);

            //fprintf(stdout, "Located: %d on distance %f\n", np.found, np.dist2[0]);

            // if less than 8 photons return
            if (np.Found < 8)
            {
                np.Dist2 = null;
                np.index = null;
                return;
            }

            Vector3D pdir;

            // sum irradiance from all photons
            for (int i = 1; i <= np.Found; i++)
            {
                Photon p = np.index[i];
                // the photon_dir call and following if can be omitted (for speed)
                // if the scene does not have any thin surfaces
                photon_dir(out pdir, p);
                if ((pdir.X * normal.X + pdir.Y * normal.Y + pdir.Z * normal.Z) < 0.0f)
                {
                    irrad.R += p.Power.R;
                    irrad.G += p.Power.G;
                    irrad.B += p.Power.B;
                }
            }

            float tmp = (float)((1.0f / Math.PI) / (np.Dist2[0]));    // estimate of density

            irrad.R *= tmp;
            irrad.G *= tmp;
            irrad.B *= tmp;

            np.Dist2 = null;
            np.index = null;
        }


        /* locate_photons finds the nearest photons in the
         * photon map given the parameters in np
        */
        //******************************************
        void locate_photons(
          ref NearestPhotons np,
          int index)
        //******************************************
        {
            Photon p = photons[index];
            float dist1;

            if (index < half_stored_photons)
            {
                dist1 = np.Position[p.Plane] - p.Position[p.Plane];

                if (dist1 > 0.0)
                { // if dist1 is positive search right plane
                    locate_photons(ref np, 2 * index + 1);
                    if (dist1 * dist1 < np.Dist2[0])
                        locate_photons(ref np, 2 * index);
                }
                else
                {         // dist1 is negative search left first
                    locate_photons(ref np, 2 * index);
                    if (dist1 * dist1 < np.Dist2[0])
                        locate_photons(ref np, 2 * index + 1);
                }
            }

            // compute squared distance between current photon and np.Position

            dist1 = p.Position[0] - np.Position[0];
            float dist2 = dist1 * dist1;
            dist1 = p.Position[1] - np.Position[1];
            dist2 += dist1 * dist1;
            dist1 = p.Position[2] - np.Position[2];
            dist2 += dist1 * dist1;

            if (dist2 < np.Dist2[0])
            {
                // we found a photon  [:)] Insert it in the candidate list

                if (np.Found < np.Max)
                {
                    // heap is not full; use array
                    np.Found++;
                    np.Dist2[np.Found] = dist2;
                    np.index[np.Found] = p;
                }
                else
                {
                    int j, parent;

                    if (np.GotHeap == false)
                    { // Do we need to build the heap?
                        // Build heap
                        float dst2;
                        Photon phot;
                        int half_found = np.Found >> 1;
                        for (int k = half_found; k >= 1; k--)
                        {
                            parent = k;
                            phot = np.index[k];
                            dst2 = np.Dist2[k];
                            while (parent <= half_found)
                            {
                                j = parent + parent;
                                if (j < np.Found && np.Dist2[j] < np.Dist2[j + 1])
                                    j++;
                                if (dst2 >= np.Dist2[j])
                                    break;
                                np.Dist2[parent] = np.Dist2[j];
                                np.index[parent] = np.index[j];
                                parent = j;
                            }
                            np.Dist2[parent] = dst2;
                            np.index[parent] = phot;
                        }
                        np.GotHeap = true;
                    }

                    // insert new photon into max heap
                    // delete largest element, insert new and reorder the heap

                    parent = 1;
                    j = 2;
                    while (j <= np.Found)
                    {
                        if (j < np.Found && np.Dist2[j] < np.Dist2[j + 1])
                            j++;
                        if (dist2 > np.Dist2[j])
                            break;
                        np.Dist2[parent] = np.Dist2[j];
                        np.index[parent] = np.index[j];
                        parent = j;
                        j += j;
                    }
                    np.index[parent] = p;
                    np.Dist2[parent] = dist2;

                    np.Dist2[0] = np.Dist2[1];
                }
            }
        }


        /* store puts a photon into the flat array that will form
         * the final kd-tree.
         *
         * Call this function to store a photon.
        */
        //***************************
        void store(
          RGBColor power,
          Point3D pos,
          Vector3D dir)
        //***************************
        {
            if (stored_photons >= max_photons)
                return;

            stored_photons++;
            Photon node = photons[stored_photons];

            for (int i = 0; i < 3; i++)
            {
                node.Position[i] = pos[i];
                if (node.Position[i] < bbox_min[i])
                    bbox_min[i] = node.Position[i];
                if (node.Position[i] > bbox_max[i])
                    bbox_max[i] = node.Position[i];
            }
            node.Power = power;

            int theta = (int)(Math.Acos(dir[2]) * (256.0 / Math.PI));
            if (theta > 255)
                node.Theta = 255;
            else
                node.Theta = (byte)theta;

            int phi = (int)(Math.Atan2(dir[1], dir[0]) * (256.0 / (2.0 * Math.PI)));
            if (phi > 255)
                node.Phi = 255;
            else if (phi < 0)
                node.Phi = (byte)(phi + 256);
            else
                node.Phi = (byte)phi;
        }


        /* scale_photon_power is used to scale the power of all
         * photons once they have been emitted from the light
         * source. scale = 1/(#emitted photons).
         * Call this function after each light source is processed.
        */
        //********************************************************
        void scale_photon_power(float scale)
        //********************************************************
        {
            for (int i = prev_scale; i <= stored_photons; i++)
            {
                photons[i].Power.R *= scale;
                photons[i].Power.G *= scale;
                photons[i].Power.B *= scale;
            }
            prev_scale = stored_photons;
        }


        /* balance creates a left balanced kd-tree from the flat photon array.
         * This function should be called before the photon map
         * is used for rendering.
         */
        //******************************
        void balance()
        //******************************
        {
            if (stored_photons > 1)
            {
                // allocate two temporary arrays for the balancing procedure
                Photon[] pa1 = new Photon[stored_photons + 1];
                Photon[] pa2 = new Photon[stored_photons + 1];

                int i;
                for (i = 0; i <= stored_photons; i++)
                    pa2[i] = photons[i];

                balance_segment(pa1, pa2, 1, 1, stored_photons);
                pa2 = null;

                // reorganize balanced kd-tree (make a heap)
                int d, j = 1, foo = 1;
                Photon foo_photon = photons[j];

                for (i = 1; i <= stored_photons; i++)
                {
                    d = pa1[j] - photons;
                    pa1[j] = null;
                    if (d != foo)
                        photons[j] = photons[d];
                    else
                    {
                        photons[j] = foo_photon;

                        if (i < stored_photons)
                        {
                            for (; foo <= stored_photons; foo++)
                                if (pa1[foo] != null)
                                    break;
                            foo_photon = photons[foo];
                            j = foo;
                        }
                        continue;
                    }
                    j = d;
                }
                pa1 = null;
            }

            half_stored_photons = stored_photons / 2 - 1;
        }


        private void swap(Photon[] ph, int a, int b)
        {
            Photon ph2 = ph[a];
            ph[a] = ph[b];
            ph[b] = ph2;
        }

        // median_split splits the photon array into two separate
        // pieces around the median with all photons below the
        // the median in the lower half and all photons above
        // than the median in the upper half. The comparison
        // criteria is the axis (indicated by the axis parameter)
        // (inspired by routine in "Algorithms in C++" by Sedgewick)
        //*****************************************************************
        void median_split(
          Photon[] p,
          int start,               // start of photon block in array
          int end,                 // end of photon block in array
          int median,              // desired median number
          int axis)               // axis to split along
        //*****************************************************************
        {
            int left = start;
            int right = end;

            while (right > left)
            {
                float v = p[right].Position[axis];
                int i = left - 1;
                int j = right;
                for (; ; )
                {
                    while (p[++i].Position[axis] < v)
                        ;
                    while (p[--j].Position[axis] > v && j > left)
                        ;
                    if (i >= j)
                        break;
                    swap(p, i, j);
                }

                swap(p, i, right);
                if (i >= median)
                    right = i - 1;
                if (i <= median)
                    left = i + 1;
            }
        }


        // See "Realistic image synthesis using Photon Mapping" chapter 6
        // for an explanation of this function
        //****************************
        void balance_segment(
          Photon[] pbal,
          Photon[] porg,
          int index,
          int start,
          int end)
        //****************************
        {
            //--------------------
            // compute new median
            //--------------------

            int median = 1;
            while ((4 * median) <= (end - start + 1))
                median += median;

            if ((3 * median) <= (end - start + 1))
            {
                median += median;
                median += start - 1;
            }
            else
                median = end - median + 1;

            //--------------------------
            // find axis to split along
            //--------------------------

            int axis = 2;
            if ((bbox_max[0] - bbox_min[0]) > (bbox_max[1] - bbox_min[1]) &&
          (bbox_max[0] - bbox_min[0]) > (bbox_max[2] - bbox_min[2]))
                axis = 0;
            else if ((bbox_max[1] - bbox_min[1]) > (bbox_max[2] - bbox_min[2]))
                axis = 1;

            //------------------------------------------
            // partition photon block around the median
            //------------------------------------------

            median_split(porg, start, end, median, axis);

            pbal[index] = porg[median];
            pbal[index].Plane = (short)axis;

            //----------------------------------------------
            // recursively balance the left and right block
            //----------------------------------------------

            if (median > start)
            {
                // balance left segment
                if (start < median - 1)
                {
                    float tmp = bbox_max[axis];
                    bbox_max[axis] = pbal[index].Position[axis];
                    balance_segment(pbal, porg, 2 * index, start, median - 1);
                    bbox_max[axis] = tmp;
                }
                else
                {
                    pbal[2 * index] = porg[start];
                }
            }

            if (median < end)
            {
                // balance right segment
                if (median + 1 < end)
                {
                    float tmp = bbox_min[axis];
                    bbox_min[axis] = pbal[index].Position[axis];
                    balance_segment(pbal, porg, 2 * index + 1, median + 1, end);
                    bbox_min[axis] = tmp;
                }
                else
                {
                    pbal[2 * index + 1] = porg[end];
                }
            }
        }


    }
}
